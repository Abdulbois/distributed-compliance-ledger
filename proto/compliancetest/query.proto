syntax = "proto3";
package zigbeealliance.distributedcomplianceledger.compliancetest;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "compliancetest/testing_results.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/zigbee-alliance/distributed-compliance-ledger/x/compliancetest/types";

// Query defines the gRPC querier service.
service Query {
    // Queries a TestingResults by index.
	rpc TestingResults(QueryGetTestingResultsRequest) returns (QueryGetTestingResultsResponse) {
		option (google.api.http).get = "/dcl/compliancetest/testing-results/{vid}/{pid}/{software_version}";
	}

	// Queries a list of TestingResults items.
	rpc TestingResultsAll(QueryAllTestingResultsRequest) returns (QueryAllTestingResultsResponse) {
		option (google.api.http).get = "/dcl/compliancetest/testing-results";
	}

// this line is used by starport scaffolding # 2
}

message QueryGetTestingResultsRequest {
  int32 vid = 1;
  int32 pid = 2;
  uint32 software_version = 3;

}

message QueryGetTestingResultsResponse {
	TestingResults testingResults = 1 [(gogoproto.nullable) = true];
}

message QueryAllTestingResultsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTestingResultsResponse {
	repeated TestingResults testingResults = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
