// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pki/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetApprovedCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetApprovedCertificatesRequest) Reset()         { *m = QueryGetApprovedCertificatesRequest{} }
func (m *QueryGetApprovedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedCertificatesRequest) ProtoMessage()    {}
func (*QueryGetApprovedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{0}
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesRequest.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetApprovedCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetApprovedCertificatesResponse struct {
	ApprovedCertificates ApprovedCertificates `protobuf:"bytes,1,opt,name=approvedCertificates,proto3" json:"approvedCertificates"`
}

func (m *QueryGetApprovedCertificatesResponse) Reset()         { *m = QueryGetApprovedCertificatesResponse{} }
func (m *QueryGetApprovedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedCertificatesResponse) ProtoMessage()    {}
func (*QueryGetApprovedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{1}
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesResponse.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesResponse) GetApprovedCertificates() ApprovedCertificates {
	if m != nil {
		return m.ApprovedCertificates
	}
	return ApprovedCertificates{}
}

type QueryAllApprovedCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovedCertificatesRequest) Reset()         { *m = QueryAllApprovedCertificatesRequest{} }
func (m *QueryAllApprovedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovedCertificatesRequest) ProtoMessage()    {}
func (*QueryAllApprovedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{2}
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovedCertificatesRequest.Merge(m, src)
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovedCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllApprovedCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllApprovedCertificatesResponse struct {
	ApprovedCertificates []ApprovedCertificates `protobuf:"bytes,1,rep,name=approvedCertificates,proto3" json:"approvedCertificates"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovedCertificatesResponse) Reset()         { *m = QueryAllApprovedCertificatesResponse{} }
func (m *QueryAllApprovedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovedCertificatesResponse) ProtoMessage()    {}
func (*QueryAllApprovedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{3}
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovedCertificatesResponse.Merge(m, src)
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovedCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllApprovedCertificatesResponse) GetApprovedCertificates() []ApprovedCertificates {
	if m != nil {
		return m.ApprovedCertificates
	}
	return nil
}

func (m *QueryAllApprovedCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProposedCertificateRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetProposedCertificateRequest) Reset()         { *m = QueryGetProposedCertificateRequest{} }
func (m *QueryGetProposedCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposedCertificateRequest) ProtoMessage()    {}
func (*QueryGetProposedCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{4}
}
func (m *QueryGetProposedCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateRequest.Merge(m, src)
}
func (m *QueryGetProposedCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateRequest proto.InternalMessageInfo

func (m *QueryGetProposedCertificateRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetProposedCertificateRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetProposedCertificateResponse struct {
	ProposedCertificate ProposedCertificate `protobuf:"bytes,1,opt,name=proposedCertificate,proto3" json:"proposedCertificate"`
}

func (m *QueryGetProposedCertificateResponse) Reset()         { *m = QueryGetProposedCertificateResponse{} }
func (m *QueryGetProposedCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposedCertificateResponse) ProtoMessage()    {}
func (*QueryGetProposedCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{5}
}
func (m *QueryGetProposedCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateResponse.Merge(m, src)
}
func (m *QueryGetProposedCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateResponse proto.InternalMessageInfo

func (m *QueryGetProposedCertificateResponse) GetProposedCertificate() ProposedCertificate {
	if m != nil {
		return m.ProposedCertificate
	}
	return ProposedCertificate{}
}

type QueryAllProposedCertificateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateRequest) Reset()         { *m = QueryAllProposedCertificateRequest{} }
func (m *QueryAllProposedCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposedCertificateRequest) ProtoMessage()    {}
func (*QueryAllProposedCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{6}
}
func (m *QueryAllProposedCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateRequest.Merge(m, src)
}
func (m *QueryAllProposedCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateRequest proto.InternalMessageInfo

func (m *QueryAllProposedCertificateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProposedCertificateResponse struct {
	ProposedCertificate []ProposedCertificate `protobuf:"bytes,1,rep,name=proposedCertificate,proto3" json:"proposedCertificate"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateResponse) Reset()         { *m = QueryAllProposedCertificateResponse{} }
func (m *QueryAllProposedCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposedCertificateResponse) ProtoMessage()    {}
func (*QueryAllProposedCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{7}
}
func (m *QueryAllProposedCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateResponse.Merge(m, src)
}
func (m *QueryAllProposedCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateResponse proto.InternalMessageInfo

func (m *QueryAllProposedCertificateResponse) GetProposedCertificate() []ProposedCertificate {
	if m != nil {
		return m.ProposedCertificate
	}
	return nil
}

func (m *QueryAllProposedCertificateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChildCertificatesRequest struct {
	Issuer         string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AuthorityKeyId string `protobuf:"bytes,2,opt,name=authorityKeyId,proto3" json:"authorityKeyId,omitempty"`
}

func (m *QueryGetChildCertificatesRequest) Reset()         { *m = QueryGetChildCertificatesRequest{} }
func (m *QueryGetChildCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChildCertificatesRequest) ProtoMessage()    {}
func (*QueryGetChildCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{8}
}
func (m *QueryGetChildCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChildCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChildCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChildCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChildCertificatesRequest.Merge(m, src)
}
func (m *QueryGetChildCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChildCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChildCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChildCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetChildCertificatesRequest) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *QueryGetChildCertificatesRequest) GetAuthorityKeyId() string {
	if m != nil {
		return m.AuthorityKeyId
	}
	return ""
}

type QueryGetChildCertificatesResponse struct {
	ChildCertificates ChildCertificates `protobuf:"bytes,1,opt,name=childCertificates,proto3" json:"childCertificates"`
}

func (m *QueryGetChildCertificatesResponse) Reset()         { *m = QueryGetChildCertificatesResponse{} }
func (m *QueryGetChildCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChildCertificatesResponse) ProtoMessage()    {}
func (*QueryGetChildCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{9}
}
func (m *QueryGetChildCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChildCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChildCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChildCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChildCertificatesResponse.Merge(m, src)
}
func (m *QueryGetChildCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChildCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChildCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChildCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetChildCertificatesResponse) GetChildCertificates() ChildCertificates {
	if m != nil {
		return m.ChildCertificates
	}
	return ChildCertificates{}
}

type QueryGetProposedCertificateRevocationRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetProposedCertificateRevocationRequest) Reset() {
	*m = QueryGetProposedCertificateRevocationRequest{}
}
func (m *QueryGetProposedCertificateRevocationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProposedCertificateRevocationRequest) ProtoMessage() {}
func (*QueryGetProposedCertificateRevocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{10}
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateRevocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateRevocationRequest.Merge(m, src)
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateRevocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateRevocationRequest proto.InternalMessageInfo

func (m *QueryGetProposedCertificateRevocationRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetProposedCertificateRevocationRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetProposedCertificateRevocationResponse struct {
	ProposedCertificateRevocation ProposedCertificateRevocation `protobuf:"bytes,1,opt,name=proposedCertificateRevocation,proto3" json:"proposedCertificateRevocation"`
}

func (m *QueryGetProposedCertificateRevocationResponse) Reset() {
	*m = QueryGetProposedCertificateRevocationResponse{}
}
func (m *QueryGetProposedCertificateRevocationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProposedCertificateRevocationResponse) ProtoMessage() {}
func (*QueryGetProposedCertificateRevocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{11}
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateRevocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateRevocationResponse.Merge(m, src)
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateRevocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateRevocationResponse proto.InternalMessageInfo

func (m *QueryGetProposedCertificateRevocationResponse) GetProposedCertificateRevocation() ProposedCertificateRevocation {
	if m != nil {
		return m.ProposedCertificateRevocation
	}
	return ProposedCertificateRevocation{}
}

type QueryAllProposedCertificateRevocationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateRevocationRequest) Reset() {
	*m = QueryAllProposedCertificateRevocationRequest{}
}
func (m *QueryAllProposedCertificateRevocationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllProposedCertificateRevocationRequest) ProtoMessage() {}
func (*QueryAllProposedCertificateRevocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{12}
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateRevocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateRevocationRequest.Merge(m, src)
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateRevocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateRevocationRequest proto.InternalMessageInfo

func (m *QueryAllProposedCertificateRevocationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProposedCertificateRevocationResponse struct {
	ProposedCertificateRevocation []ProposedCertificateRevocation `protobuf:"bytes,1,rep,name=proposedCertificateRevocation,proto3" json:"proposedCertificateRevocation"`
	Pagination                    *query.PageResponse             `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateRevocationResponse) Reset() {
	*m = QueryAllProposedCertificateRevocationResponse{}
}
func (m *QueryAllProposedCertificateRevocationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllProposedCertificateRevocationResponse) ProtoMessage() {}
func (*QueryAllProposedCertificateRevocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{13}
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateRevocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateRevocationResponse.Merge(m, src)
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateRevocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateRevocationResponse proto.InternalMessageInfo

func (m *QueryAllProposedCertificateRevocationResponse) GetProposedCertificateRevocation() []ProposedCertificateRevocation {
	if m != nil {
		return m.ProposedCertificateRevocation
	}
	return nil
}

func (m *QueryAllProposedCertificateRevocationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRevokedCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetRevokedCertificatesRequest) Reset()         { *m = QueryGetRevokedCertificatesRequest{} }
func (m *QueryGetRevokedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedCertificatesRequest) ProtoMessage()    {}
func (*QueryGetRevokedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{14}
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetRevokedCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetRevokedCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetRevokedCertificatesResponse struct {
	RevokedCertificates RevokedCertificates `protobuf:"bytes,1,opt,name=revokedCertificates,proto3" json:"revokedCertificates"`
}

func (m *QueryGetRevokedCertificatesResponse) Reset()         { *m = QueryGetRevokedCertificatesResponse{} }
func (m *QueryGetRevokedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedCertificatesResponse) ProtoMessage()    {}
func (*QueryGetRevokedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{15}
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRevokedCertificatesResponse) GetRevokedCertificates() RevokedCertificates {
	if m != nil {
		return m.RevokedCertificates
	}
	return RevokedCertificates{}
}

type QueryAllRevokedCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedCertificatesRequest) Reset()         { *m = QueryAllRevokedCertificatesRequest{} }
func (m *QueryAllRevokedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokedCertificatesRequest) ProtoMessage()    {}
func (*QueryAllRevokedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{16}
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedCertificatesRequest.Merge(m, src)
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllRevokedCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRevokedCertificatesResponse struct {
	RevokedCertificates []RevokedCertificates `protobuf:"bytes,1,rep,name=revokedCertificates,proto3" json:"revokedCertificates"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedCertificatesResponse) Reset()         { *m = QueryAllRevokedCertificatesResponse{} }
func (m *QueryAllRevokedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokedCertificatesResponse) ProtoMessage()    {}
func (*QueryAllRevokedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{17}
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedCertificatesResponse.Merge(m, src)
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllRevokedCertificatesResponse) GetRevokedCertificates() []RevokedCertificates {
	if m != nil {
		return m.RevokedCertificates
	}
	return nil
}

func (m *QueryAllRevokedCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetApprovedRootCertificatesRequest struct {
}

func (m *QueryGetApprovedRootCertificatesRequest) Reset() {
	*m = QueryGetApprovedRootCertificatesRequest{}
}
func (m *QueryGetApprovedRootCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedRootCertificatesRequest) ProtoMessage()    {}
func (*QueryGetApprovedRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{18}
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedRootCertificatesRequest.Merge(m, src)
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedRootCertificatesRequest proto.InternalMessageInfo

type QueryGetApprovedRootCertificatesResponse struct {
	ApprovedRootCertificates ApprovedRootCertificates `protobuf:"bytes,1,opt,name=approvedRootCertificates,proto3" json:"approvedRootCertificates"`
}

func (m *QueryGetApprovedRootCertificatesResponse) Reset() {
	*m = QueryGetApprovedRootCertificatesResponse{}
}
func (m *QueryGetApprovedRootCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedRootCertificatesResponse) ProtoMessage()    {}
func (*QueryGetApprovedRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{19}
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedRootCertificatesResponse.Merge(m, src)
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetApprovedRootCertificatesResponse) GetApprovedRootCertificates() ApprovedRootCertificates {
	if m != nil {
		return m.ApprovedRootCertificates
	}
	return ApprovedRootCertificates{}
}

type QueryGetRevokedRootCertificatesRequest struct {
}

func (m *QueryGetRevokedRootCertificatesRequest) Reset() {
	*m = QueryGetRevokedRootCertificatesRequest{}
}
func (m *QueryGetRevokedRootCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedRootCertificatesRequest) ProtoMessage()    {}
func (*QueryGetRevokedRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{20}
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedRootCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedRootCertificatesRequest proto.InternalMessageInfo

type QueryGetRevokedRootCertificatesResponse struct {
	RevokedRootCertificates RevokedRootCertificates `protobuf:"bytes,1,opt,name=revokedRootCertificates,proto3" json:"revokedRootCertificates"`
}

func (m *QueryGetRevokedRootCertificatesResponse) Reset() {
	*m = QueryGetRevokedRootCertificatesResponse{}
}
func (m *QueryGetRevokedRootCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedRootCertificatesResponse) ProtoMessage()    {}
func (*QueryGetRevokedRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{21}
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedRootCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRevokedRootCertificatesResponse) GetRevokedRootCertificates() RevokedRootCertificates {
	if m != nil {
		return m.RevokedRootCertificates
	}
	return RevokedRootCertificates{}
}

type QueryGetApprovedCertificatesBySubjectRequest struct {
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) Reset() {
	*m = QueryGetApprovedCertificatesBySubjectRequest{}
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetApprovedCertificatesBySubjectRequest) ProtoMessage() {}
func (*QueryGetApprovedCertificatesBySubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{22}
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesBySubjectRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type QueryGetApprovedCertificatesBySubjectResponse struct {
	ApprovedCertificatesBySubject ApprovedCertificatesBySubject `protobuf:"bytes,1,opt,name=approvedCertificatesBySubject,proto3" json:"approvedCertificatesBySubject"`
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) Reset() {
	*m = QueryGetApprovedCertificatesBySubjectResponse{}
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetApprovedCertificatesBySubjectResponse) ProtoMessage() {}
func (*QueryGetApprovedCertificatesBySubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{23}
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesBySubjectResponse) GetApprovedCertificatesBySubject() ApprovedCertificatesBySubject {
	if m != nil {
		return m.ApprovedCertificatesBySubject
	}
	return ApprovedCertificatesBySubject{}
}

type QueryGetRejectedCertificateRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetRejectedCertificateRequest) Reset()         { *m = QueryGetRejectedCertificateRequest{} }
func (m *QueryGetRejectedCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedCertificateRequest) ProtoMessage()    {}
func (*QueryGetRejectedCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{24}
}
func (m *QueryGetRejectedCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedCertificateRequest.Merge(m, src)
}
func (m *QueryGetRejectedCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedCertificateRequest proto.InternalMessageInfo

func (m *QueryGetRejectedCertificateRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetRejectedCertificateRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetRejectedCertificateResponse struct {
	RejectedCertificate RejectedCertificate `protobuf:"bytes,1,opt,name=rejectedCertificate,proto3" json:"rejectedCertificate"`
}

func (m *QueryGetRejectedCertificateResponse) Reset()         { *m = QueryGetRejectedCertificateResponse{} }
func (m *QueryGetRejectedCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedCertificateResponse) ProtoMessage()    {}
func (*QueryGetRejectedCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{25}
}
func (m *QueryGetRejectedCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedCertificateResponse.Merge(m, src)
}
func (m *QueryGetRejectedCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedCertificateResponse proto.InternalMessageInfo

func (m *QueryGetRejectedCertificateResponse) GetRejectedCertificate() RejectedCertificate {
	if m != nil {
		return m.RejectedCertificate
	}
	return RejectedCertificate{}
}

type QueryAllRejectedCertificateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRejectedCertificateRequest) Reset()         { *m = QueryAllRejectedCertificateRequest{} }
func (m *QueryAllRejectedCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRejectedCertificateRequest) ProtoMessage()    {}
func (*QueryAllRejectedCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{26}
}
func (m *QueryAllRejectedCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRejectedCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRejectedCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRejectedCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRejectedCertificateRequest.Merge(m, src)
}
func (m *QueryAllRejectedCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRejectedCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRejectedCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRejectedCertificateRequest proto.InternalMessageInfo

func (m *QueryAllRejectedCertificateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRejectedCertificateResponse struct {
	RejectedCertificate []RejectedCertificate `protobuf:"bytes,1,rep,name=rejectedCertificate,proto3" json:"rejectedCertificate"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRejectedCertificateResponse) Reset()         { *m = QueryAllRejectedCertificateResponse{} }
func (m *QueryAllRejectedCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRejectedCertificateResponse) ProtoMessage()    {}
func (*QueryAllRejectedCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62972e0134af9ed2, []int{27}
}
func (m *QueryAllRejectedCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRejectedCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRejectedCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRejectedCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRejectedCertificateResponse.Merge(m, src)
}
func (m *QueryAllRejectedCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRejectedCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRejectedCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRejectedCertificateResponse proto.InternalMessageInfo

func (m *QueryAllRejectedCertificateResponse) GetRejectedCertificate() []RejectedCertificate {
	if m != nil {
		return m.RejectedCertificate
	}
	return nil
}

func (m *QueryAllRejectedCertificateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetApprovedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesRequest")
	proto.RegisterType((*QueryGetApprovedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesResponse")
	proto.RegisterType((*QueryAllApprovedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllApprovedCertificatesRequest")
	proto.RegisterType((*QueryAllApprovedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllApprovedCertificatesResponse")
	proto.RegisterType((*QueryGetProposedCertificateRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateRequest")
	proto.RegisterType((*QueryGetProposedCertificateResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateResponse")
	proto.RegisterType((*QueryAllProposedCertificateRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateRequest")
	proto.RegisterType((*QueryAllProposedCertificateResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateResponse")
	proto.RegisterType((*QueryGetChildCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetChildCertificatesRequest")
	proto.RegisterType((*QueryGetChildCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetChildCertificatesResponse")
	proto.RegisterType((*QueryGetProposedCertificateRevocationRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateRevocationRequest")
	proto.RegisterType((*QueryGetProposedCertificateRevocationResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateRevocationResponse")
	proto.RegisterType((*QueryAllProposedCertificateRevocationRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateRevocationRequest")
	proto.RegisterType((*QueryAllProposedCertificateRevocationResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateRevocationResponse")
	proto.RegisterType((*QueryGetRevokedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedCertificatesRequest")
	proto.RegisterType((*QueryGetRevokedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedCertificatesResponse")
	proto.RegisterType((*QueryAllRevokedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedCertificatesRequest")
	proto.RegisterType((*QueryAllRevokedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedCertificatesResponse")
	proto.RegisterType((*QueryGetApprovedRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedRootCertificatesRequest")
	proto.RegisterType((*QueryGetApprovedRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedRootCertificatesResponse")
	proto.RegisterType((*QueryGetRevokedRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedRootCertificatesRequest")
	proto.RegisterType((*QueryGetRevokedRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedRootCertificatesResponse")
	proto.RegisterType((*QueryGetApprovedCertificatesBySubjectRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesBySubjectRequest")
	proto.RegisterType((*QueryGetApprovedCertificatesBySubjectResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesBySubjectResponse")
	proto.RegisterType((*QueryGetRejectedCertificateRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRejectedCertificateRequest")
	proto.RegisterType((*QueryGetRejectedCertificateResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRejectedCertificateResponse")
	proto.RegisterType((*QueryAllRejectedCertificateRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRejectedCertificateRequest")
	proto.RegisterType((*QueryAllRejectedCertificateResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRejectedCertificateResponse")
}

func init() { proto.RegisterFile("pki/query.proto", fileDescriptor_62972e0134af9ed2) }

var fileDescriptor_62972e0134af9ed2 = []byte{
	// 1329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0xef, 0xa4, 0xdf, 0xef, 0x22, 0x06, 0x04, 0xda, 0x69, 0x69, 0x4b, 0x68, 0xd3, 0xee, 0x6c,
	0xe9, 0x2f, 0x68, 0x4c, 0x17, 0xb1, 0x0b, 0x07, 0x40, 0xfd, 0x21, 0xba, 0x80, 0x90, 0xba, 0x29,
	0x62, 0x11, 0x5a, 0xa8, 0x1c, 0x67, 0x48, 0x4d, 0xdd, 0x8c, 0xd7, 0x76, 0x2a, 0x42, 0x55, 0x0e,
	0x48, 0x08, 0x89, 0x13, 0x02, 0x2e, 0x70, 0xe4, 0x80, 0xb8, 0x73, 0xe0, 0x5f, 0x58, 0x89, 0xcb,
	0x4a, 0x5c, 0x38, 0xad, 0x50, 0xcb, 0x01, 0xc4, 0x01, 0x71, 0x01, 0x71, 0x01, 0xe4, 0xf1, 0xa4,
	0xb6, 0xe3, 0x99, 0x49, 0xea, 0x4c, 0xe0, 0xe6, 0xcc, 0x3c, 0xbf, 0xcf, 0xfb, 0x7c, 0xe6, 0xcd,
	0x9b, 0x79, 0x0e, 0xbc, 0xdf, 0xdd, 0xb3, 0x8d, 0x9b, 0x4d, 0xe2, 0xb5, 0xca, 0xae, 0x47, 0x03,
	0x8a, 0xca, 0xef, 0xd8, 0xf5, 0x2a, 0x21, 0xa6, 0xe3, 0xd8, 0x66, 0xc3, 0x22, 0xe5, 0x9a, 0xed,
	0x07, 0x9e, 0x5d, 0x6d, 0x06, 0xa4, 0x66, 0xd1, 0x7d, 0x37, 0x1a, 0x75, 0x48, 0xad, 0x4e, 0xbc,
	0xb2, 0xbb, 0x67, 0x17, 0x27, 0xeb, 0x94, 0xd6, 0x1d, 0x62, 0x98, 0xae, 0x6d, 0x98, 0x8d, 0x06,
	0x0d, 0xcc, 0xc0, 0xa6, 0x0d, 0x3f, 0xf2, 0x56, 0x5c, 0xb2, 0xa8, 0xbf, 0x4f, 0x7d, 0xa3, 0x6a,
	0xfa, 0x24, 0x82, 0x31, 0x0e, 0x56, 0xaa, 0x24, 0x30, 0x57, 0x0c, 0xd7, 0xac, 0xdb, 0x0d, 0x66,
	0xcc, 0x6d, 0xa7, 0xc3, 0x50, 0x4c, 0xd7, 0xf5, 0xe8, 0x01, 0xa9, 0xed, 0x58, 0xc4, 0x0b, 0xec,
	0x37, 0x6d, 0xcb, 0x0c, 0x48, 0xdb, 0x59, 0x29, 0x34, 0x70, 0x3d, 0xea, 0x52, 0x3f, 0x6d, 0xc0,
	0xe7, 0x27, 0xc3, 0x79, 0x6b, 0xd7, 0x76, 0x84, 0x6f, 0x2f, 0xca, 0xde, 0xde, 0xf1, 0xc8, 0x01,
	0xb5, 0x92, 0x91, 0x30, 0xa0, 0x70, 0x74, 0x4f, 0x1c, 0xc8, 0x6c, 0x2a, 0x52, 0x8f, 0xd2, 0x40,
	0x64, 0x75, 0x31, 0xe9, 0x45, 0x66, 0xb4, 0x24, 0x25, 0xbd, 0x53, 0x6d, 0xed, 0xf8, 0xcd, 0xea,
	0x5b, 0xc4, 0x0a, 0xd2, 0x61, 0x85, 0x23, 0x42, 0xfe, 0xa3, 0x75, 0x5a, 0xa7, 0xec, 0xd1, 0x08,
	0x9f, 0xf8, 0xe8, 0x83, 0xd1, 0x12, 0xec, 0x44, 0x13, 0xd1, 0x8f, 0x68, 0x0a, 0x5b, 0xf0, 0xe2,
	0xb5, 0x70, 0x4d, 0x36, 0x49, 0xb0, 0xca, 0x43, 0x58, 0x4f, 0x44, 0x50, 0x21, 0x37, 0x9b, 0xc4,
	0x0f, 0xd0, 0x04, 0xbc, 0x8b, 0x07, 0x32, 0x01, 0x66, 0xc0, 0xc2, 0xdd, 0x95, 0xf6, 0x4f, 0x84,
	0xe1, 0xbd, 0xfc, 0xf1, 0x45, 0xd2, 0x7a, 0xbe, 0x36, 0x51, 0x60, 0xd3, 0xa9, 0x31, 0xfc, 0x25,
	0x80, 0xb3, 0x6a, 0x14, 0xdf, 0xa5, 0x0d, 0x9f, 0xa0, 0x77, 0xe1, 0xa8, 0x29, 0x98, 0x67, 0x98,
	0xf7, 0x5c, 0xda, 0x38, 0x63, 0x62, 0x96, 0x45, 0x58, 0x6b, 0xff, 0xbb, 0x75, 0x67, 0x7a, 0xa8,
	0x22, 0xc4, 0xc1, 0xfb, 0x5c, 0x8d, 0x55, 0xc7, 0x51, 0xa9, 0xf1, 0x1c, 0x84, 0x71, 0xea, 0xf2,
	0xe0, 0xe6, 0xca, 0x5c, 0xd7, 0x30, 0xcf, 0xcb, 0xd1, 0x76, 0xe2, 0x79, 0x5e, 0xde, 0x32, 0xeb,
	0x84, 0xbf, 0x5b, 0x49, 0xbc, 0x89, 0x7f, 0x6d, 0xeb, 0x22, 0xc5, 0xeb, 0xaa, 0xcb, 0xf0, 0xbf,
	0xa1, 0x0b, 0xda, 0x4c, 0x11, 0x2e, 0x30, 0xc2, 0xf3, 0x5d, 0x09, 0x47, 0xc1, 0xa7, 0x18, 0x57,
	0x21, 0x6e, 0x27, 0xc2, 0x16, 0xdf, 0x87, 0x09, 0x20, 0x3d, 0xd9, 0xf6, 0x05, 0x88, 0x73, 0x5a,
	0x08, 0xc2, 0x45, 0x3d, 0x84, 0x23, 0x6e, 0x76, 0x9a, 0x2f, 0xe7, 0xfa, 0x59, 0x35, 0x15, 0x20,
	0x71, 0x49, 0x45, 0x28, 0xd8, 0xe1, 0x42, 0xac, 0x3a, 0x8e, 0x42, 0x08, 0x5d, 0x89, 0xf6, 0x0b,
	0x88, 0x13, 0x3b, 0x97, 0x24, 0xc3, 0x83, 0x97, 0x44, 0x67, 0x92, 0xcd, 0xb4, 0xd7, 0x7f, 0x3d,
	0x3c, 0x0a, 0x44, 0x5b, 0x78, 0x0c, 0x9e, 0xb3, 0x7d, 0xbf, 0x49, 0x3c, 0x9e, 0x61, 0xfc, 0x17,
	0x9a, 0x83, 0xf7, 0x99, 0xcd, 0x60, 0x97, 0x7a, 0x76, 0xd0, 0x4a, 0xa6, 0x58, 0xc7, 0x28, 0xfe,
	0x1c, 0xc0, 0x0b, 0x0a, 0x10, 0xae, 0x67, 0x13, 0x9e, 0xb7, 0x3a, 0x27, 0xf9, 0x32, 0xae, 0x9e,
	0x55, 0xcd, 0x0c, 0x0a, 0xd7, 0x32, 0x8b, 0x80, 0x1d, 0xf8, 0xa8, 0x72, 0x03, 0xb4, 0xcf, 0x3a,
	0x3d, 0xfb, 0xed, 0x5b, 0x00, 0x97, 0x7b, 0x84, 0xe3, 0xb2, 0x7c, 0x06, 0xe0, 0x94, 0xab, 0xb2,
	0xe4, 0x1a, 0xbd, 0xa4, 0x21, 0xe3, 0x62, 0xa7, 0x5c, 0x2f, 0x35, 0x32, 0x3e, 0xe0, 0xda, 0xc9,
	0x76, 0x4a, 0xa7, 0x76, 0xba, 0xb6, 0xe8, 0xa7, 0x05, 0xae, 0x62, 0x77, 0xe0, 0x33, 0xa8, 0x38,
	0xfc, 0xdf, 0xa8, 0x38, 0x90, 0x03, 0xa3, 0x12, 0xdd, 0xa3, 0xf4, 0x5f, 0x4f, 0x92, 0x07, 0x86,
	0x10, 0x24, 0xae, 0x8e, 0x5e, 0x76, 0x3a, 0xef, 0x81, 0x21, 0x40, 0x6a, 0x57, 0x47, 0x01, 0x4a,
	0xf2, 0xc0, 0x50, 0x08, 0x31, 0x88, 0x03, 0x23, 0x97, 0x24, 0xc3, 0x83, 0x97, 0x44, 0x5f, 0x92,
	0x2d, 0xc2, 0xf9, 0xce, 0xeb, 0x69, 0x85, 0xd2, 0x40, 0x20, 0x30, 0xfe, 0x06, 0xc0, 0x85, 0xee,
	0xb6, 0x5c, 0x9d, 0x0f, 0x01, 0x9c, 0x30, 0x25, 0x46, 0x7c, 0x71, 0xae, 0xe6, 0xbd, 0xbb, 0x75,
	0xfa, 0xe3, 0x42, 0x49, 0xf1, 0xf0, 0x02, 0x9c, 0xeb, 0x48, 0x72, 0x19, 0xc7, 0xaf, 0x41, 0xac,
	0x87, 0xd4, 0x94, 0x53, 0xfc, 0x00, 0xc0, 0x71, 0x4f, 0x6c, 0xc3, 0x19, 0x6e, 0xe6, 0xcc, 0x02,
	0x09, 0x41, 0x19, 0x1a, 0xbe, 0x1a, 0x1f, 0x7a, 0xc2, 0xfb, 0x6d, 0x6b, 0x3b, 0xda, 0xf3, 0x5d,
	0x6b, 0x46, 0xea, 0x40, 0xeb, 0xe2, 0x2a, 0x51, 0x8a, 0x4d, 0x95, 0x65, 0xde, 0x03, 0x4d, 0x09,
	0xdf, 0x2e, 0xc5, 0x4a, 0xe4, 0x74, 0x05, 0x8d, 0x1a, 0xc7, 0x81, 0x5e, 0xb9, 0x85, 0x20, 0xc9,
	0x72, 0x91, 0x99, 0xce, 0x5f, 0x41, 0x33, 0xae, 0xe2, 0x72, 0x91, 0x99, 0x4a, 0x57, 0x50, 0xa9,
	0x10, 0x83, 0xa9, 0xa0, 0x39, 0x24, 0x19, 0x1e, 0xbc, 0x24, 0xda, 0x2a, 0xe8, 0xa5, 0x3b, 0x0f,
	0xc1, 0xff, 0x33, 0xb6, 0xe8, 0x4f, 0x00, 0x47, 0x45, 0x59, 0x8b, 0xb6, 0xcf, 0xca, 0xa5, 0x87,
	0xef, 0x12, 0xc5, 0x97, 0xf5, 0x3a, 0x8d, 0x98, 0xe1, 0xcb, 0xef, 0x7d, 0xf7, 0xe3, 0x27, 0x85,
	0xc7, 0x50, 0xd9, 0xa8, 0x59, 0x8e, 0xc1, 0x3e, 0x29, 0x25, 0xcc, 0x8c, 0x43, 0x9e, 0xfb, 0x47,
	0xa7, 0x4f, 0x6c, 0x17, 0x1c, 0xa1, 0x13, 0x00, 0xc7, 0x45, 0x8e, 0x57, 0x1d, 0x27, 0x27, 0x7d,
	0xf5, 0x87, 0x88, 0x9c, 0xf4, 0xbb, 0x7c, 0x6d, 0xc0, 0x53, 0x8c, 0xfe, 0x38, 0x7a, 0x40, 0x48,
	0x1f, 0xfd, 0x0d, 0xe0, 0x88, 0xe0, 0x8a, 0x88, 0x2a, 0x79, 0xd7, 0x42, 0xde, 0x00, 0x17, 0xb7,
	0xb5, 0xfa, 0xe4, 0xfc, 0x9e, 0x65, 0xfc, 0x9e, 0x42, 0x57, 0x4e, 0xf9, 0xb5, 0x2f, 0xb3, 0xcb,
	0xbd, 0xad, 0xf3, 0xcf, 0x00, 0x8e, 0x09, 0x00, 0xc2, 0x65, 0xae, 0xe4, 0x5d, 0x11, 0xed, 0x22,
	0xa8, 0x5b, 0x7d, 0x3c, 0xc7, 0x44, 0x98, 0x41, 0x25, 0xb5, 0x08, 0xe8, 0x0f, 0x00, 0xcf, 0x67,
	0x5a, 0x4f, 0xb4, 0x95, 0x77, 0x5d, 0x64, 0x0d, 0x79, 0xf1, 0x9a, 0x46, 0x8f, 0x9c, 0xe2, 0xd3,
	0x8c, 0xe2, 0x15, 0xf4, 0x44, 0x9c, 0xc7, 0xa1, 0x6d, 0xc7, 0x22, 0x47, 0x8d, 0xff, 0x91, 0x71,
	0x98, 0xee, 0xf0, 0x8f, 0xd0, 0x57, 0x05, 0x38, 0xa5, 0x6c, 0x85, 0xd0, 0x0d, 0xad, 0xd9, 0xd9,
	0xd1, 0x59, 0x16, 0x5f, 0x1f, 0x90, 0x77, 0xae, 0xce, 0x0b, 0x4c, 0x9d, 0x0d, 0xb4, 0x96, 0x4d,
	0x80, 0xf8, 0x6b, 0x78, 0x8f, 0x1b, 0xe2, 0xe3, 0x02, 0x9c, 0x51, 0xa2, 0x86, 0x5b, 0xe3, 0x86,
	0xd6, 0x34, 0xd6, 0xa3, 0x56, 0xaf, 0xcd, 0x36, 0x5e, 0x61, 0x6a, 0x3d, 0x82, 0x16, 0x7b, 0x56,
	0x0b, 0xfd, 0x05, 0xe0, 0x88, 0xa0, 0xa3, 0xc9, 0x5f, 0x27, 0xe5, 0x7d, 0x5f, 0xfe, 0x3a, 0xa9,
	0x68, 0xee, 0xf0, 0x33, 0x8c, 0xf3, 0x93, 0xe8, 0xf2, 0x29, 0x67, 0x7e, 0xf7, 0xee, 0x31, 0x2b,
	0x7e, 0x02, 0x70, 0x4c, 0xe0, 0xbf, 0xaf, 0x32, 0xa9, 0x5d, 0x03, 0x75, 0x83, 0x8b, 0x1f, 0x66,
	0x1a, 0x4c, 0xa3, 0x29, 0xa5, 0x06, 0xe8, 0x37, 0x00, 0x27, 0x64, 0x9d, 0x19, 0xba, 0xde, 0xef,
	0x25, 0x45, 0xd2, 0xa8, 0x15, 0x5f, 0xd5, 0xef, 0x98, 0xd3, 0xc6, 0x8c, 0xf6, 0x24, 0x2a, 0xc6,
	0xb4, 0x29, 0x0d, 0xd2, 0x9c, 0x7f, 0x07, 0x70, 0x5c, 0xd2, 0xab, 0xa1, 0x57, 0xfa, 0xcc, 0x47,
	0x19, 0xe3, 0xeb, 0xda, 0xfd, 0x72, 0xc2, 0x4b, 0x8c, 0xf0, 0x2c, 0xc2, 0x99, 0x75, 0xce, 0x12,
	0x7f, 0xbf, 0x00, 0xa7, 0x94, 0x8d, 0x59, 0xfe, 0x83, 0xa1, 0x97, 0xce, 0x35, 0xff, 0xc1, 0xd0,
	0x53, 0x33, 0x8b, 0xe7, 0x99, 0x14, 0x17, 0xd0, 0x74, 0x97, 0xdb, 0x2f, 0x2f, 0x70, 0xd9, 0xae,
	0xa2, 0x8f, 0x02, 0x27, 0x6b, 0xcb, 0xfa, 0x29, 0x70, 0xd2, 0xde, 0x4b, 0x58, 0xe0, 0xb2, 0x7f,
	0xad, 0x76, 0x2b, 0x70, 0x19, 0xff, 0x7d, 0x16, 0x38, 0xcd, 0x1a, 0xa8, 0xfb, 0x4f, 0x61, 0x81,
	0xcb, 0x6a, 0xb0, 0xf6, 0xc6, 0xad, 0xe3, 0x12, 0xb8, 0x7d, 0x5c, 0x02, 0x3f, 0x1c, 0x97, 0xc0,
	0x47, 0x27, 0xa5, 0xa1, 0xdb, 0x27, 0xa5, 0xa1, 0xef, 0x4f, 0x4a, 0x43, 0xaf, 0x6d, 0xd4, 0xed,
	0x60, 0xb7, 0x59, 0x2d, 0x5b, 0x74, 0xdf, 0x88, 0xe2, 0x5b, 0x6e, 0x07, 0x68, 0x24, 0x02, 0x5c,
	0x8e, 0x23, 0x5c, 0x8e, 0x42, 0x34, 0xde, 0x66, 0x70, 0x41, 0xcb, 0x25, 0x7e, 0xf5, 0x1c, 0xfb,
	0x3b, 0xfa, 0xf1, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75, 0x64, 0xdf, 0x1b, 0x8d, 0x20, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a ApprovedCertificates by index.
	ApprovedCertificates(ctx context.Context, in *QueryGetApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesResponse, error)
	// Queries a list of ApprovedCertificates items.
	ApprovedCertificatesAll(ctx context.Context, in *QueryAllApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllApprovedCertificatesResponse, error)
	// Queries a ProposedCertificate by index.
	ProposedCertificate(ctx context.Context, in *QueryGetProposedCertificateRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateResponse, error)
	// Queries a list of ProposedCertificate items.
	ProposedCertificateAll(ctx context.Context, in *QueryAllProposedCertificateRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateResponse, error)
	// Queries a ChildCertificates by index.
	ChildCertificates(ctx context.Context, in *QueryGetChildCertificatesRequest, opts ...grpc.CallOption) (*QueryGetChildCertificatesResponse, error)
	// Queries a ProposedCertificateRevocation by index.
	ProposedCertificateRevocation(ctx context.Context, in *QueryGetProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateRevocationResponse, error)
	// Queries a list of ProposedCertificateRevocation items.
	ProposedCertificateRevocationAll(ctx context.Context, in *QueryAllProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateRevocationResponse, error)
	// Queries a RevokedCertificates by index.
	RevokedCertificates(ctx context.Context, in *QueryGetRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedCertificatesResponse, error)
	// Queries a list of RevokedCertificates items.
	RevokedCertificatesAll(ctx context.Context, in *QueryAllRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedCertificatesResponse, error)
	// Queries a ApprovedRootCertificates by index.
	ApprovedRootCertificates(ctx context.Context, in *QueryGetApprovedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedRootCertificatesResponse, error)
	// Queries a RevokedRootCertificates by index.
	RevokedRootCertificates(ctx context.Context, in *QueryGetRevokedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedRootCertificatesResponse, error)
	// Queries a ApprovedCertificatesBySubject by index.
	ApprovedCertificatesBySubject(ctx context.Context, in *QueryGetApprovedCertificatesBySubjectRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesBySubjectResponse, error)
	// Queries a RejectedCertificate by index.
	RejectedCertificate(ctx context.Context, in *QueryGetRejectedCertificateRequest, opts ...grpc.CallOption) (*QueryGetRejectedCertificateResponse, error)
	// Queries a list of RejectedCertificate items.
	RejectedCertificateAll(ctx context.Context, in *QueryAllRejectedCertificateRequest, opts ...grpc.CallOption) (*QueryAllRejectedCertificateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ApprovedCertificates(ctx context.Context, in *QueryGetApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesResponse, error) {
	out := new(QueryGetApprovedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedCertificatesAll(ctx context.Context, in *QueryAllApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllApprovedCertificatesResponse, error) {
	out := new(QueryAllApprovedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificate(ctx context.Context, in *QueryGetProposedCertificateRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateResponse, error) {
	out := new(QueryGetProposedCertificateResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificateAll(ctx context.Context, in *QueryAllProposedCertificateRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateResponse, error) {
	out := new(QueryAllProposedCertificateResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChildCertificates(ctx context.Context, in *QueryGetChildCertificatesRequest, opts ...grpc.CallOption) (*QueryGetChildCertificatesResponse, error) {
	out := new(QueryGetChildCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ChildCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificateRevocation(ctx context.Context, in *QueryGetProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateRevocationResponse, error) {
	out := new(QueryGetProposedCertificateRevocationResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificateRevocationAll(ctx context.Context, in *QueryAllProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateRevocationResponse, error) {
	out := new(QueryAllProposedCertificateRevocationResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedCertificates(ctx context.Context, in *QueryGetRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedCertificatesResponse, error) {
	out := new(QueryGetRevokedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedCertificatesAll(ctx context.Context, in *QueryAllRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedCertificatesResponse, error) {
	out := new(QueryAllRevokedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedRootCertificates(ctx context.Context, in *QueryGetApprovedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedRootCertificatesResponse, error) {
	out := new(QueryGetApprovedRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedRootCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedRootCertificates(ctx context.Context, in *QueryGetRevokedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedRootCertificatesResponse, error) {
	out := new(QueryGetRevokedRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedRootCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedCertificatesBySubject(ctx context.Context, in *QueryGetApprovedCertificatesBySubjectRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesBySubjectResponse, error) {
	out := new(QueryGetApprovedCertificatesBySubjectResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesBySubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RejectedCertificate(ctx context.Context, in *QueryGetRejectedCertificateRequest, opts ...grpc.CallOption) (*QueryGetRejectedCertificateResponse, error) {
	out := new(QueryGetRejectedCertificateResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RejectedCertificateAll(ctx context.Context, in *QueryAllRejectedCertificateRequest, opts ...grpc.CallOption) (*QueryAllRejectedCertificateResponse, error) {
	out := new(QueryAllRejectedCertificateResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a ApprovedCertificates by index.
	ApprovedCertificates(context.Context, *QueryGetApprovedCertificatesRequest) (*QueryGetApprovedCertificatesResponse, error)
	// Queries a list of ApprovedCertificates items.
	ApprovedCertificatesAll(context.Context, *QueryAllApprovedCertificatesRequest) (*QueryAllApprovedCertificatesResponse, error)
	// Queries a ProposedCertificate by index.
	ProposedCertificate(context.Context, *QueryGetProposedCertificateRequest) (*QueryGetProposedCertificateResponse, error)
	// Queries a list of ProposedCertificate items.
	ProposedCertificateAll(context.Context, *QueryAllProposedCertificateRequest) (*QueryAllProposedCertificateResponse, error)
	// Queries a ChildCertificates by index.
	ChildCertificates(context.Context, *QueryGetChildCertificatesRequest) (*QueryGetChildCertificatesResponse, error)
	// Queries a ProposedCertificateRevocation by index.
	ProposedCertificateRevocation(context.Context, *QueryGetProposedCertificateRevocationRequest) (*QueryGetProposedCertificateRevocationResponse, error)
	// Queries a list of ProposedCertificateRevocation items.
	ProposedCertificateRevocationAll(context.Context, *QueryAllProposedCertificateRevocationRequest) (*QueryAllProposedCertificateRevocationResponse, error)
	// Queries a RevokedCertificates by index.
	RevokedCertificates(context.Context, *QueryGetRevokedCertificatesRequest) (*QueryGetRevokedCertificatesResponse, error)
	// Queries a list of RevokedCertificates items.
	RevokedCertificatesAll(context.Context, *QueryAllRevokedCertificatesRequest) (*QueryAllRevokedCertificatesResponse, error)
	// Queries a ApprovedRootCertificates by index.
	ApprovedRootCertificates(context.Context, *QueryGetApprovedRootCertificatesRequest) (*QueryGetApprovedRootCertificatesResponse, error)
	// Queries a RevokedRootCertificates by index.
	RevokedRootCertificates(context.Context, *QueryGetRevokedRootCertificatesRequest) (*QueryGetRevokedRootCertificatesResponse, error)
	// Queries a ApprovedCertificatesBySubject by index.
	ApprovedCertificatesBySubject(context.Context, *QueryGetApprovedCertificatesBySubjectRequest) (*QueryGetApprovedCertificatesBySubjectResponse, error)
	// Queries a RejectedCertificate by index.
	RejectedCertificate(context.Context, *QueryGetRejectedCertificateRequest) (*QueryGetRejectedCertificateResponse, error)
	// Queries a list of RejectedCertificate items.
	RejectedCertificateAll(context.Context, *QueryAllRejectedCertificateRequest) (*QueryAllRejectedCertificateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ApprovedCertificates(ctx context.Context, req *QueryGetApprovedCertificatesRequest) (*QueryGetApprovedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCertificates not implemented")
}
func (*UnimplementedQueryServer) ApprovedCertificatesAll(ctx context.Context, req *QueryAllApprovedCertificatesRequest) (*QueryAllApprovedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificate(ctx context.Context, req *QueryGetProposedCertificateRequest) (*QueryGetProposedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificate not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificateAll(ctx context.Context, req *QueryAllProposedCertificateRequest) (*QueryAllProposedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificateAll not implemented")
}
func (*UnimplementedQueryServer) ChildCertificates(ctx context.Context, req *QueryGetChildCertificatesRequest) (*QueryGetChildCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildCertificates not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificateRevocation(ctx context.Context, req *QueryGetProposedCertificateRevocationRequest) (*QueryGetProposedCertificateRevocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificateRevocation not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificateRevocationAll(ctx context.Context, req *QueryAllProposedCertificateRevocationRequest) (*QueryAllProposedCertificateRevocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificateRevocationAll not implemented")
}
func (*UnimplementedQueryServer) RevokedCertificates(ctx context.Context, req *QueryGetRevokedCertificatesRequest) (*QueryGetRevokedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedCertificates not implemented")
}
func (*UnimplementedQueryServer) RevokedCertificatesAll(ctx context.Context, req *QueryAllRevokedCertificatesRequest) (*QueryAllRevokedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) ApprovedRootCertificates(ctx context.Context, req *QueryGetApprovedRootCertificatesRequest) (*QueryGetApprovedRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedRootCertificates not implemented")
}
func (*UnimplementedQueryServer) RevokedRootCertificates(ctx context.Context, req *QueryGetRevokedRootCertificatesRequest) (*QueryGetRevokedRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedRootCertificates not implemented")
}
func (*UnimplementedQueryServer) ApprovedCertificatesBySubject(ctx context.Context, req *QueryGetApprovedCertificatesBySubjectRequest) (*QueryGetApprovedCertificatesBySubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCertificatesBySubject not implemented")
}
func (*UnimplementedQueryServer) RejectedCertificate(ctx context.Context, req *QueryGetRejectedCertificateRequest) (*QueryGetRejectedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectedCertificate not implemented")
}
func (*UnimplementedQueryServer) RejectedCertificateAll(ctx context.Context, req *QueryAllRejectedCertificateRequest) (*QueryAllRejectedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectedCertificateAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ApprovedCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCertificates(ctx, req.(*QueryGetApprovedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllApprovedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCertificatesAll(ctx, req.(*QueryAllApprovedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProposedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificate(ctx, req.(*QueryGetProposedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificateAll(ctx, req.(*QueryAllProposedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChildCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChildCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChildCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ChildCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChildCertificates(ctx, req.(*QueryGetChildCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificateRevocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProposedCertificateRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificateRevocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificateRevocation(ctx, req.(*QueryGetProposedCertificateRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificateRevocationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposedCertificateRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificateRevocationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificateRevocationAll(ctx, req.(*QueryAllProposedCertificateRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedCertificates(ctx, req.(*QueryGetRevokedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRevokedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedCertificatesAll(ctx, req.(*QueryAllRevokedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedRootCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedRootCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedRootCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedRootCertificates(ctx, req.(*QueryGetApprovedRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedRootCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokedRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedRootCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedRootCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedRootCertificates(ctx, req.(*QueryGetRevokedRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedCertificatesBySubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedCertificatesBySubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCertificatesBySubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesBySubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCertificatesBySubject(ctx, req.(*QueryGetApprovedCertificatesBySubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RejectedCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRejectedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RejectedCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RejectedCertificate(ctx, req.(*QueryGetRejectedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RejectedCertificateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRejectedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RejectedCertificateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RejectedCertificateAll(ctx, req.(*QueryAllRejectedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zigbeealliance.distributedcomplianceledger.pki.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApprovedCertificates",
			Handler:    _Query_ApprovedCertificates_Handler,
		},
		{
			MethodName: "ApprovedCertificatesAll",
			Handler:    _Query_ApprovedCertificatesAll_Handler,
		},
		{
			MethodName: "ProposedCertificate",
			Handler:    _Query_ProposedCertificate_Handler,
		},
		{
			MethodName: "ProposedCertificateAll",
			Handler:    _Query_ProposedCertificateAll_Handler,
		},
		{
			MethodName: "ChildCertificates",
			Handler:    _Query_ChildCertificates_Handler,
		},
		{
			MethodName: "ProposedCertificateRevocation",
			Handler:    _Query_ProposedCertificateRevocation_Handler,
		},
		{
			MethodName: "ProposedCertificateRevocationAll",
			Handler:    _Query_ProposedCertificateRevocationAll_Handler,
		},
		{
			MethodName: "RevokedCertificates",
			Handler:    _Query_RevokedCertificates_Handler,
		},
		{
			MethodName: "RevokedCertificatesAll",
			Handler:    _Query_RevokedCertificatesAll_Handler,
		},
		{
			MethodName: "ApprovedRootCertificates",
			Handler:    _Query_ApprovedRootCertificates_Handler,
		},
		{
			MethodName: "RevokedRootCertificates",
			Handler:    _Query_RevokedRootCertificates_Handler,
		},
		{
			MethodName: "ApprovedCertificatesBySubject",
			Handler:    _Query_ApprovedCertificatesBySubject_Handler,
		},
		{
			MethodName: "RejectedCertificate",
			Handler:    _Query_RejectedCertificate_Handler,
		},
		{
			MethodName: "RejectedCertificateAll",
			Handler:    _Query_RejectedCertificateAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pki/query.proto",
}

func (m *QueryGetApprovedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApprovedCertificates) > 0 {
		for iNdEx := len(m.ApprovedCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProposedCertificate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposedCertificate) > 0 {
		for iNdEx := len(m.ProposedCertificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposedCertificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChildCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChildCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChildCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthorityKeyId) > 0 {
		i -= len(m.AuthorityKeyId)
		copy(dAtA[i:], m.AuthorityKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AuthorityKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChildCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChildCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChildCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChildCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateRevocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateRevocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateRevocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateRevocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateRevocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateRevocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProposedCertificateRevocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateRevocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateRevocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateRevocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateRevocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateRevocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateRevocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposedCertificateRevocation) > 0 {
		for iNdEx := len(m.ProposedCertificateRevocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposedCertificateRevocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevokedCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RevokedCertificates) > 0 {
		for iNdEx := len(m.RevokedCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RevokedCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedRootCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevokedRootCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedCertificatesBySubject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RejectedCertificate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRejectedCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRejectedCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRejectedCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRejectedCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRejectedCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRejectedCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RejectedCertificate) > 0 {
		for iNdEx := len(m.RejectedCertificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RejectedCertificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetApprovedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovedCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllApprovedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllApprovedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApprovedCertificates) > 0 {
		for _, e := range m.ApprovedCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposedCertificate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProposedCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProposedCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposedCertificate) > 0 {
		for _, e := range m.ProposedCertificate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChildCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AuthorityKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChildCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChildCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProposedCertificateRevocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedCertificateRevocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposedCertificateRevocation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProposedCertificateRevocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProposedCertificateRevocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposedCertificateRevocation) > 0 {
		for _, e := range m.ProposedCertificateRevocation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RevokedCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRevokedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRevokedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RevokedCertificates) > 0 {
		for _, e := range m.RevokedCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetApprovedRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovedRootCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRevokedRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetRevokedRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RevokedRootCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovedCertificatesBySubject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRejectedCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRejectedCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RejectedCertificate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRejectedCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRejectedCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RejectedCertificate) > 0 {
		for _, e := range m.RejectedCertificate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetApprovedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedCertificates = append(m.ApprovedCertificates, ApprovedCertificates{})
			if err := m.ApprovedCertificates[len(m.ApprovedCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposedCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedCertificate = append(m.ProposedCertificate, ProposedCertificate{})
			if err := m.ProposedCertificate[len(m.ProposedCertificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChildCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChildCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChildCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorityKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChildCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChildCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChildCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChildCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateRevocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateRevocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificateRevocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposedCertificateRevocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateRevocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateRevocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificateRevocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedCertificateRevocation = append(m.ProposedCertificateRevocation, ProposedCertificateRevocation{})
			if err := m.ProposedCertificateRevocation[len(m.ProposedCertificateRevocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevokedCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokedCertificates = append(m.RevokedCertificates, RevokedCertificates{})
			if err := m.RevokedCertificates[len(m.RevokedCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedRootCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevokedRootCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCertificatesBySubject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedCertificatesBySubject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RejectedCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRejectedCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRejectedCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRejectedCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRejectedCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRejectedCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRejectedCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectedCertificate = append(m.RejectedCertificate, RejectedCertificate{})
			if err := m.RejectedCertificate[len(m.RejectedCertificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
