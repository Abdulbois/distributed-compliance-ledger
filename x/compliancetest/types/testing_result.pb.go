// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compliancetest/testing_result.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestingResult struct {
	Vid                   int32  `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Pid                   int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	SoftwareVersion       uint32 `protobuf:"varint,3,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	SoftwareVersionString string `protobuf:"bytes,4,opt,name=software_version_string,json=softwareVersionString,proto3" json:"software_version_string,omitempty"`
	Owner                 string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	TestResult            string `protobuf:"bytes,6,opt,name=test_result,json=testResult,proto3" json:"test_result,omitempty"`
	TestDate              string `protobuf:"bytes,7,opt,name=test_date,json=testDate,proto3" json:"test_date,omitempty"`
}

func (m *TestingResult) Reset()         { *m = TestingResult{} }
func (m *TestingResult) String() string { return proto.CompactTextString(m) }
func (*TestingResult) ProtoMessage()    {}
func (*TestingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_66472bb6b93e76e5, []int{0}
}
func (m *TestingResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestingResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestingResult.Merge(m, src)
}
func (m *TestingResult) XXX_Size() int {
	return m.Size()
}
func (m *TestingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TestingResult.DiscardUnknown(m)
}

var xxx_messageInfo_TestingResult proto.InternalMessageInfo

func (m *TestingResult) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *TestingResult) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *TestingResult) GetSoftwareVersion() uint32 {
	if m != nil {
		return m.SoftwareVersion
	}
	return 0
}

func (m *TestingResult) GetSoftwareVersionString() string {
	if m != nil {
		return m.SoftwareVersionString
	}
	return ""
}

func (m *TestingResult) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *TestingResult) GetTestResult() string {
	if m != nil {
		return m.TestResult
	}
	return ""
}

func (m *TestingResult) GetTestDate() string {
	if m != nil {
		return m.TestDate
	}
	return ""
}

func init() {
	proto.RegisterType((*TestingResult)(nil), "zigbeealliance.distributedcomplianceledger.compliancetest.TestingResult")
}

func init() {
	proto.RegisterFile("compliancetest/testing_result.proto", fileDescriptor_66472bb6b93e76e5)
}

var fileDescriptor_66472bb6b93e76e5 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0xad, 0x5b, 0x5a, 0xa8, 0x51, 0x45, 0x15, 0x81, 0x30, 0x20, 0x85, 0x0a, 0x96, 0x32, 0x24,
	0x1e, 0x90, 0x90, 0x18, 0xa9, 0xd8, 0x91, 0x02, 0x62, 0x60, 0x89, 0x92, 0xfa, 0x08, 0x96, 0xd2,
	0x38, 0xb2, 0xdd, 0x16, 0x98, 0xf9, 0x00, 0x3e, 0x86, 0x8f, 0x60, 0xac, 0x98, 0x18, 0x51, 0xfb,
	0x23, 0xc8, 0x76, 0xab, 0x42, 0x96, 0x28, 0x7e, 0xf7, 0xee, 0xdd, 0xdd, 0x7b, 0xf8, 0x74, 0x28,
	0x46, 0x65, 0xce, 0x93, 0x62, 0x08, 0x1a, 0x94, 0xa6, 0xe6, 0xc3, 0x8b, 0x2c, 0x96, 0xa0, 0xc6,
	0xb9, 0x0e, 0x4b, 0x29, 0xb4, 0xf0, 0x2e, 0x5f, 0x79, 0x96, 0x02, 0x24, 0xb9, 0x23, 0x86, 0x8c,
	0x2b, 0x2d, 0x79, 0x3a, 0xd6, 0xc0, 0xd6, 0xed, 0x39, 0xb0, 0x0c, 0x64, 0xf8, 0x5f, 0xef, 0xf0,
	0x60, 0x28, 0xd4, 0x48, 0xa8, 0xd8, 0x0a, 0x51, 0xf7, 0x70, 0xaa, 0x27, 0x6f, 0x75, 0xdc, 0xb9,
	0x73, 0xe3, 0x22, 0x3b, 0xcd, 0xeb, 0xe2, 0xc6, 0x84, 0x33, 0x82, 0x7a, 0xa8, 0xdf, 0x8c, 0xcc,
	0xaf, 0x41, 0x4a, 0xce, 0x48, 0xdd, 0x21, 0x25, 0x67, 0xde, 0x19, 0xee, 0x2a, 0xf1, 0xa8, 0xa7,
	0x89, 0x84, 0x78, 0x02, 0x52, 0x71, 0x51, 0x90, 0x46, 0x0f, 0xf5, 0x3b, 0xd1, 0xce, 0x0a, 0xbf,
	0x77, 0xb0, 0x77, 0x81, 0xf7, 0xab, 0xd4, 0xd8, 0x2c, 0x5e, 0x64, 0x64, 0xa3, 0x87, 0xfa, 0xed,
	0x68, 0xaf, 0xd2, 0x71, 0x6b, 0x8b, 0x5e, 0x88, 0x9b, 0x62, 0x5a, 0x80, 0x24, 0x4d, 0xc3, 0x1a,
	0x90, 0xaf, 0x8f, 0x60, 0x77, 0xb9, 0xf9, 0x15, 0x63, 0x12, 0x94, 0x72, 0xc4, 0xc8, 0xd1, 0xbc,
	0x63, 0xbc, 0x6d, 0x6e, 0x5d, 0x7a, 0x46, 0x5a, 0x56, 0x1b, 0x1b, 0x68, 0x79, 0xd7, 0x11, 0x6e,
	0x5b, 0x02, 0x4b, 0x34, 0x90, 0x4d, 0x5b, 0xde, 0x32, 0xc0, 0x75, 0xa2, 0x61, 0xc0, 0x3f, 0xe7,
	0x3e, 0x9a, 0xcd, 0x7d, 0xf4, 0x33, 0xf7, 0xd1, 0xfb, 0xc2, 0xaf, 0xcd, 0x16, 0x7e, 0xed, 0x7b,
	0xe1, 0xd7, 0x1e, 0x6e, 0x32, 0xae, 0x9f, 0xc6, 0xa9, 0xb1, 0x94, 0xba, 0x04, 0x82, 0x55, 0x04,
	0xf4, 0x4f, 0x04, 0xc1, 0xda, 0xf2, 0xc0, 0x85, 0x40, 0x9f, 0x69, 0x35, 0xd6, 0x97, 0x12, 0x54,
	0xda, 0xb2, 0xc6, 0x9f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x06, 0x70, 0xf1, 0xed, 0xf5, 0x01,
	0x00, 0x00,
}

func (m *TestingResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestingResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestingResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestDate) > 0 {
		i -= len(m.TestDate)
		copy(dAtA[i:], m.TestDate)
		i = encodeVarintTestingResult(dAtA, i, uint64(len(m.TestDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TestResult) > 0 {
		i -= len(m.TestResult)
		copy(dAtA[i:], m.TestResult)
		i = encodeVarintTestingResult(dAtA, i, uint64(len(m.TestResult)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTestingResult(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SoftwareVersionString) > 0 {
		i -= len(m.SoftwareVersionString)
		copy(dAtA[i:], m.SoftwareVersionString)
		i = encodeVarintTestingResult(dAtA, i, uint64(len(m.SoftwareVersionString)))
		i--
		dAtA[i] = 0x22
	}
	if m.SoftwareVersion != 0 {
		i = encodeVarintTestingResult(dAtA, i, uint64(m.SoftwareVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintTestingResult(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Vid != 0 {
		i = encodeVarintTestingResult(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestingResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestingResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestingResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovTestingResult(uint64(m.Vid))
	}
	if m.Pid != 0 {
		n += 1 + sovTestingResult(uint64(m.Pid))
	}
	if m.SoftwareVersion != 0 {
		n += 1 + sovTestingResult(uint64(m.SoftwareVersion))
	}
	l = len(m.SoftwareVersionString)
	if l > 0 {
		n += 1 + l + sovTestingResult(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTestingResult(uint64(l))
	}
	l = len(m.TestResult)
	if l > 0 {
		n += 1 + l + sovTestingResult(uint64(l))
	}
	l = len(m.TestDate)
	if l > 0 {
		n += 1 + l + sovTestingResult(uint64(l))
	}
	return n
}

func sovTestingResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestingResult(x uint64) (n int) {
	return sovTestingResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestingResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestingResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestingResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestingResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			m.SoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersionString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestingResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestingResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersionString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestingResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestingResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestingResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestingResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestingResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestingResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestingResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestingResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestingResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestingResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestingResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestingResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestingResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestingResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestingResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestingResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestingResult = fmt.Errorf("proto: unexpected end of group")
)
